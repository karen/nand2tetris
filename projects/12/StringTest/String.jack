// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int zero, neg;

    field Array data;
    field int maxLen;
    field int curLen;
    function void init() {
        let zero = 48;
        let neg = 45;
        return;
    }
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let data = Array.new(maxLength);
        let maxLen = maxLength;
        let curLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(data);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curLen < maxLen) {
            do setCharAt(curLen, c);
            let curLen = curLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (curLen > 0) {
            let curLen = curLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i, sign;
        if (data[0] = neg) {
            let i = 1;
            let sign = -1;
        } else {
            let i = 0;
            let sign = 1;
        }
        let result = 0;
        while ((i < curLen) & isDigit(i)) {
            let result = (result * 10) + String.digit(data[i]);
            let i = i + 1;
        }
        return result * sign;
    }

    method boolean isDigit(int i) {
        return (charAt(i) > 47) & (charAt(i) < 58);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let curLen = 0;
        if (val < 0) {
            let val = -(val + 1) + 1;
            do appendChar(neg);
        }

        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val) {
        var int digit;
        var char c;
        let digit = val - ((val / 10) * 10);
        let c = String.chr(digit);

        if (val < 10) {
            do appendChar(c);
        } else {
            do setIntHelper(val / 10);
            do appendChar(c);
        }
        return;
    }

    function char chr(int x) {
        return zero + x;
    }

    function int digit(char x) {
        return x - zero;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
