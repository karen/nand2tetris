// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int curColour;
    static int black, white;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let curColour = black;
        let black = 1;
        let white = 0;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = white;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curColour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, rem, bit;
        
        let address = (32 * y) + (x / 16);
        let value = screen[address];

        let bit = Math.powerOfTwo(x & 15);
        
        if (curColour) {
            let value = value | bit;
        } else {
            let value = value & ~bit;
        }
        let screen[address] = value;
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, cx, cy, diff;
        if (x1 > x2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        let dx = x1 - x2;
        let dy = y1 - y2;

        if (dx = 0) {
            do Screen.drawVertical(x1, y1, y2);
            return;
        }

        if (dy = 0) {
            do Screen.drawHorizontal(x1, x2, y1);
            return;
        }

        do Screen.drawDiagonal(x1, y1, x2, y2);
        return;
    }

    function void drawDiagonal(int x1, int y1, int x2, int y2) {
        var int dx, dy, yDir, a, b, diff;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy < 0) {
            let yDir = -1;
        } else {
            let yDir = 1;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        while (~(a > dx) & ( ((yDir = 1) & ~(b > dy)) | ((yDir = -1) & ~(b < dy)) )) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if ( ((yDir = 1) & (diff < 0)) | ((yDir = -1) & (diff > 0)) ) {
                let a = a + 1;
                let diff = diff + (dy);
            } else {
                let b = b + yDir;
                let diff = diff - (dx*yDir);
            }
        }
        return;
    }

    function void drawVertical(int x1, int y1, int y2) {
        if (y1 > y2) {
            do Screen.drawVertical(x1, y2, y1);
            return;
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x1, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontal(int x1, int x2, int y1) {
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y1);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int row;
        if (x1 > x2) {
            do Screen.drawRectangle(x2, y2, x1, y1);
            return;
        }
        let row = y1;
        while (~(row > y2)) {
            do Screen.drawHorizontal(x1, x2, row);
            let row = row + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSq, dySq;
        let r = Math.abs(r);
        let rSq = r * r;
        let dy = -r;
        while (~(dy > r)) {
            let dySq = dy * dy;
            let dx = Math.sqrt(rSq - dySq);
            do Screen.drawHorizontal(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
