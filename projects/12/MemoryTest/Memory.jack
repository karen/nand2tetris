// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    static int SIZE;
    static int NEXT;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;

        let SIZE = 0;
        let NEXT = 1;

        let freeList[SIZE] = 14335;
        let freeList[NEXT] = null;
        return;     
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int curr, prev, ans;
        
        let curr = freeList;
        let prev = null;
        while(~(curr[SIZE] > size) & ~(curr[NEXT] = null)) {
            let prev = curr;
            let curr = curr[NEXT];
        }
        
        if (~(curr[SIZE] > (size + 1))) {
            if (prev = null) {
                let freeList = curr[NEXT];
            } else {
                let prev[NEXT] = curr[NEXT];  
            }
            let size = curr[SIZE] - 1;
        }
        let curr[SIZE] = curr[SIZE] - (size + 1);
        let ans = curr + curr[SIZE] + 1;
        let ans[-1] = size + 1;

        return ans;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = o - 1;
        let segment[SIZE] = o[-1];
        let segment[NEXT] = freeList;
        let freeList = segment;
        return;
    }    
}
